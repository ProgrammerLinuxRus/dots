# Autogenerated config.py


# Load existing settings made via :set
#config.load_autoconfig()

#dracula.draw.blood(c, {
#    'spacing': {
#        'vertical': 6,
#        'horizontal': 8
#    }
#})
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')
#config.set("colors.webpage.darkmode.enabled",True)
# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:133.0) Gecko/20100101 Firefox/133.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/ban/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/ban/.local/share/qutebrowser/userscripts/*')
c.url.searchengines = {
    'DEFAULT':  'https://search.brave.com/search?q={}'
}
c.url.start_pages = ["https://search.brave.com/"]
#c.colors.webpage.darkmode.enabled = True

#
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #000000, stop:1 #3c3836)' # фон заголовков таких как history bookmark и тд
c.colors.completion.fg = ['#9cc4ff', 'white', 'white'] #цвет элементов в выпадающем меню [ссылка, название страницы, дата]
c.colors.completion.category.fg = '#8ec07c' #цвет заголовков history bookmark и тд e1acff
c.colors.completion.odd.bg = '#1c1f24' #цвет фона нечетных элементов выпадающего меню
c.colors.completion.even.bg = '#232429' # цвет фона четных элементов меню
c.colors.completion.category.border.top = '#3f4147' # цвет  полоски над блоком с заголовком
c.colors.completion.category.border.bottom =  '#3f4147'# цвет  полоски под блоком с заголовком
c.colors.completion.item.selected.bg = '#d79921' # цвет заднего фона выбранного элемента
c.colors.completion.item.selected.fg = '#000' # цвет текста выбранного элемента
c.colors.completion.item.selected.match.fg = '#000' # задает цвет текста сохожего с запросом в строке при вводе текста выделенного элемента
c.colors.completion.match.fg = '#8ec07c' # задает цвет текста схожего с запросом в строке при вводе
c.colors.completion.scrollbar.fg = '#fff' # цвет скроллбара справа от меню
c.colors.downloads.bar.bg = '#282c34' # цвет заднего фона скроллбара
c.colors.downloads.bar.bg = '#282c34' # цвет заднего фона загрузочного бара
c.colors.downloads.error.bg = '#ff6c6b' # цвет заднего фона загрузочного бара при ошибке
c.colors.statusbar.normal.bg = '#282c34' # цвет бара внизу экрана (в котором открывается менюшка и все дела) в нормально состояни(в состоянии покоя)
c.colors.statusbar.insert.bg = '#497920' # цвет заднего фона бара внизу экрана в режмие ввода (когда нажал i или a)   текста на текущей странице
c.colors.statusbar.insert.fg = 'white' # цвет текста в баре внизу экрана в режиме ввода
c.colors.statusbar.command.bg = '#282c34' # цвет бара внизу экрана в режиме ввода команды к примеру :open или /
c.colors.statusbar.url.warn.fg = '#ffcc00' # Цвет ссылки на баре внизу экрана при переходе на не безопасный сайт
c.colors.tabs.bar.bg = '#1c1f34'
c.colors.tabs.odd.bg = '#282c34' # цвет фона нечетных вкладок
c.colors.tabs.even.bg = '#282c34' # цвет фона четных вкладок
c.colors.tabs.selected.odd.bg = '#3f4147' # цвет фона нечетных выбранных вкладок
c.colors.tabs.selected.even.bg = '#3f4147' # цвет фона четных выбранных вкладок
c.colors.tabs.pinned.odd.bg = 'seagreen' # цвет фона закрепленных нечетных вкладок
c.colors.tabs.pinned.even.bg = 'darkseagreen' # цвет фона четных закрепленных вкладок
c.colors.tabs.pinned.selected.odd.bg = '#282c34' # цвет фона нечетной закрепленной выбранной вкладки
c.colors.tabs.pinned.selected.even.bg = '#282c34' # цвет фона четной закрепленной выбранной вкладки
###НАСТРОЙКА ШРИФТА###
c.fonts.default_family = ['FiraCode Nerd Font']
c.fonts.default_size = '12pt'
c.fonts.completion.entry = '12pt "FiraCode Nerd Font"'
c.fonts.debug_console = '12pt "FiraCode Nerd Font"'
c.fonts.prompts = 'default_size sans-serif'
c.fonts.statusbar = '12pt "FiraCode Nerd Font"'
